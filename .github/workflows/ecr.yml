---
name: Build and Push Image to ECR
on:
  push:
    tags:
      - "*"

jobs:
  build-push-ecr-release:
    name: Build and Push to ECR ( Release )
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: expresso-typeorm
      PROJECT_ID: masb0ymas
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
      WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Github Tag Release Version
        id: latestTag
        run: |-
          echo "Tag name from GITHUB_REF_NAME: $GITHUB_REF_NAME"
          echo "RELEASE_VERSION=release-${{ github.ref_name }}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY_IMAGE=${{ env.PROJECT_ID }}-${{ env.IMAGE_NAME }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push the Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_IMAGE }}
          IMAGE_TAG: ${{ env.RELEASE_VERSION }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Call Webhook
        uses: joelwmale/webhook-action@2.3.2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_IMAGE }}
          IMAGE_TAG: ${{ env.RELEASE_VERSION }}
        with:
          url: ${{env.WEBHOOK_URL}}/api/v1/workflow-github?telegram_chat_id=${{ env.TELEGRAM_CHAT_ID }}&slack_channel=${{ env.SLACK_CHANNEL_ID }}&registry=Elastic Container Registry
          body: '{"push_data":{"tag":"${{ env.IMAGE_TAG }}"},"repository":{"name":"${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}"}}'

  build-push-ecr-staging:
    name: Build and Push to ECR ( Staging )
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: expresso-typeorm
      PROJECT_ID: masb0ymas
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
      WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Github Tag Staging Version
        id: latestTag
        run: |-
          echo "Tag name from GITHUB_REF_NAME: $GITHUB_REF_NAME"
          echo "STAGING_VERSION=staging-${{ github.ref_name }}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY_IMAGE=${{ env.PROJECT_ID }}-${{ env.IMAGE_NAME }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push the Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_IMAGE }}
          IMAGE_TAG: ${{ env.STAGING_VERSION }}
        run: |
          docker build -f Dockerfile.dev -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Call Webhook
        uses: joelwmale/webhook-action@2.3.2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_IMAGE }}
          IMAGE_TAG: ${{ env.STAGING_VERSION }}
        with:
          url: ${{env.WEBHOOK_URL}}/api/v1/workflow-github?telegram_chat_id=${{ env.TELEGRAM_CHAT_ID }}&slack_channel=${{ env.SLACK_CHANNEL_ID }}&registry=Elastic Container Registry
          body: '{"push_data":{"tag":"${{ env.IMAGE_TAG }}"},"repository":{"name":"${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}"}}'
